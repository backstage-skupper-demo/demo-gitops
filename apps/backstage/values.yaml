backstage:
  backstage:
    extraEnvVarsSecrets:
    - github-pat
    image:
      registry: quay.io
      repository: janus-idp/backstage-showcase
      tag: latest
    extraEnvVars:
      - name: "APP_CONFIG_app_baseUrl"
        value: "https://{{ .Values.ingress.host }}"
      - name: "APP_CONFIG_backend_baseUrl"
        value: "https://{{ .Values.ingress.host }}"
      - name: "APP_CONFIG_backend_cors_origin"
        value: "https://{{ .Values.ingress.host }}"
      - name: "APP_CONFIG_backend_database_client"
        value: pg
      - name: "APP_CONFIG_backend_database_connection_host"
        value: "{{ include \"backstage.postgresql.host\" . }}"
      - name: "APP_CONFIG_backend_database_connection_port"
        value: '5432'
      - name: "APP_CONFIG_backend_database_connection_user"
        value: "{{ .Values.postgresql.auth.username }}"
      - name: "APP_CONFIG_backend_database_connection_password"
        valueFrom:
          secretKeyRef:
            key: postgres-password
            name: "{{ include \"backstage.postgresql.fullname\" . }}"
      - name: K8S_CLUSTER_NAME
        value: "local"
      - name: K8S_CLUSTER_URL
        value: "https://kubernetes.default.svc"
      - name: K8S_CLUSTER_TOKEN
        valueFrom:
          secretKeyRef:
            key: token
            name: backstage-svc 
    installDir: /opt/app-root/src
    appConfig: |
      app:
        title: Scaffolded Backstage App
        baseUrl: http://localhost:3000

      organization:
        name: My Company

      backend:
        # Used for enabling authentication, secret is shared by all backend plugins
        # See https://backstage.io/docs/tutorials/backend-to-backend-auth for
        # information on the format
        # auth:
        #   keys:
        #     - secret: ${BACKEND_SECRET}
        baseUrl: http://localhost:7007
        listen:
          port: 7007
          # Uncomment the following host directive to bind to specific interfaces
          # host: 127.0.0.1
        csp:
          connect-src: ["'self'", 'http:', 'https:']
          # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
          # Default Helmet Content-Security-Policy values can be removed by setting the key to false
        cors:
          origin: http://localhost:3000
          methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
          credentials: true
        # This is for local development only, it is not recommended to use this in production
        # The production database configuration is stored in app-config.production.yaml
        database:
          client: better-sqlite3
          connection: ':memory:'
        cache:
          store: memory
        # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

      integrations:
        github:
          - host: github.com
            # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
            # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
            token: ${GITHUB_TOKEN}
          ### Example for how to add your GitHub Enterprise instance using the API:
          # - host: ghe.example.net
          #   apiBaseUrl: https://ghe.example.net/api/v3
          #   token: ${GHE_TOKEN}

      proxy:
        ### Example for how to add a proxy endpoint for the frontend.
        ### A typical reason to do this is to handle HTTPS and CORS for internal services.
        # '/test':
        #   target: 'https://example.com'
        #   changeOrigin: true

      # Reference documentation http://backstage.io/docs/features/techdocs/configuration
      # Note: After experimenting with basic setup, use CI/CD to generate docs
      # and an external cloud storage when deploying TechDocs for production use-case.
      # https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
      techdocs:
        builder: 'local' # Alternatives - 'external'
        generator:
          runIn: 'docker' # Alternatives - 'local'
        publisher:
          type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

      auth:
        # see https://backstage.io/docs/auth/ to learn about auth providers
        providers:
          github:
            development:
              clientId: ${AUTH_GITHUB_CLIENT_ID}
              clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}

      scaffolder:
        # see https://backstage.io/docs/features/software-templates/configuration for software template options

      catalog:
        import:
          entityFilename: catalog-info.yaml
          pullRequestBranchName: backstage-integration
        rules:
          - allow: [Component, System, API, Resource, Location, Template]
        locations:
          - type: url
            target: https://github.com/backstage-skupper-demo/backstage-catalog/blob/master/catalog-info.yaml
          - type: url
            target: https://github.com/backstage-skupper-demo/backstage-catalog/blob/master/templates/new-project/new-project.yaml
          - type: url
            target: https://github.com/backstage-skupper-demo/backstage-catalog/blob/master/templates/new-site/new-site.yaml
        providers:
          github:
            wildcardProviderId:
              organization: 'backstage-skupper-demo' # string
              catalogPath: '/catalog/*.yaml' # this will search all folders for files that end in .yaml
              filters: # optional filters
                branch: 'master' # optional string
                # repository: 'project-repo' # optional Regex
            templateProvider:
              organization: 'backstage-skupper-demo' # string
              catalogPath: '/templates/*/*.yaml' # this will search all folders for files that end in .yaml
              filters: # optional filters
                branch: 'master' # optional string
                repository: 'backstage-catalog' # optional Regex

      kubernetes:
        serviceLocatorMethod:
          type: 'multiTenant'
        clusterLocatorMethods:
          - type: 'config'
            clusters:
              - name: ${K8S_CLUSTER_NAME}
                url: ${K8S_CLUSTER_URL}
                authProvider: 'serviceAccount'
                skipTLSVerify: true
                serviceAccountToken: ${K8S_CLUSTER_TOKEN}
      enabled:
        github: true
        kubernetes: true
    #   catalog:
    #     locations:
    #       - type: url
    #         target: https://github.com/backstage-skupper-demo/backstage-catalog/blob/master/catalog-info.yaml
  ingress:
    enabled: true
    host: backstage.apps.example.com
    annotations:
      route.openshift.io/termination: "edge"
  
  postgresql:
    enabled: true
    database: backstage
    postgresqlDataDir: /var/lib/pgsql/data/userdata
    auth:
      username: postgres
      database: backstage
    image:
      registry: registry.redhat.io
      repository: rhel9/postgresql-13
      tag: 1-73
    primary:
      securityContext:
        enabled: false
      podSecurityContext:
        enabled: false
      containerSecurityContext:
        enabled: false
      persistence:
        enabled: true
        mountPath: /var/lib/pgsql/data
      extraEnvVars:
      - name: POSTGRESQL_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres-password
            name: backstage-postgresql